;game80.GGG
;		GAME 8080 Compiler RunTime Routines(MAC,ASM)
codearea	equ	100H
dataarea	equ	2000H

;GAME8LIB.MAC
;		GAME 8080 Compiler RunTime Routines(M80)
;			31/Jan/1986
;		Copyright (c) by S.Takeoka (take@takeoka.org)
;
;	CRLF	SPC	PRSTR	FPUTC	PUTC	PR4HEX	PR2HEX
;	PRDECR	PRDEC	MULT	DIV	LEQ	LES	GEQ
;	GRE	INPNUM	FGETC	GETC	NEGAT	RAND
;	EXIT	KEY
;	MODUL	RND	RAMEND	MRET
;
;TITLE	'GAME 80 (8080) Compiler Runtime Routine'
;.RADIX	10
;	ENTRY	CRLF,	SPC,	PRSTR,	FPUTC,	PUTC,	PR4HEX,	PR2HEX
;	ENTRY	PRDECR,	PRDEC,	MULT,	DIV,	LEQ,	LES,	GEQ
;	ENTRY	GRE,	INPNUM,	FGETC,	GETC,	NEGAT,	RAND
;	ENTRY	EXIT,	KEY
;	ENTRY	MODUL,	RND,	RAMEND,	MRET

;	EXTRN	MAIN

BOOT	EQU	0
BDOS	EQU	5
CBSIZE	EQU	20	;CONBUF SIZE for BDOS Func 10
;
;	CSEG
	org	codearea
;
	LHLD	BDOS+1
	SPHL
	LXI	D,-100H
	DAD	D
	SHLD	RAMEND
	MVI	A,CBSIZE
	STA	CONBUF
	JMP	MAIN
;
	db 'GAME 80 Compiler V0.0 by S.Takeoka',0
;
tmpo	equ	$
;
;	DSEG
	org	dataarea
;
CONBUF:	DS	1	;Console Buffer
	DS	CBSIZE+1
DIVWORK:DS	2
DVW1:	DS	1
NUMFLG:	DS	1
NBUF:	DS	6
;
MODUL:	DS	2
RND:	DS	2
RAMEND:DS	2
MRET:	DS	2
;
VA:	DS	2
VB:	DS	2
VC:	DS	2
VD:	DS	2
VE:	DS	2
VF:	DS	2
VG:	DS	2
VH:	DS	2
VI:	DS	2
VJ:	DS	2
VK:	DS	2
VL:	DS	2
VM:	DS	2
VN:	DS	2
VO:	DS	2
VP:	DS	2
VQ:	DS	2
VR:	DS	2
VS:	DS	2
VT:	DS	2
VU:	DS	2
VV:	DS	2
VW:	DS	2
VX:	DS	2
VY:	DS	2
VZ:	DS	2
;
;	end of system working area
;
;	CSEG
	org	tmpo
;
;	Commands
CRLF:	MVI	E,0DH
	CALL	PUTCC
	MVI	E,0AH
	JMP	PUTCC
;
SPC:	MOV	B,L
	INR	B
	DCR	B
	RZ
SPC1:	MVI	E,' '
	PUSH	B
	CALL	PUTCC
	POP	B
	DCR	B
	JNZ	SPC1
	RET
;
PRSTR:	POP	H
PRS1:	MOV	A,M
	INX	H
	ORA	A
	JZ	PRS2
	MOV	E,A
	PUSH	H
	CALL	PUTCC
	POP	H
	JMP	PRS1
PRS2:	PCHL
;
FPUTC:	JMP	NOIMPR
;
PUTC:	MOV	E,L
PUTCC:	;MVI	C,2
	MVI	C,6
	JMP	BDOS
;
PR4HEX:	PUSH	H
	MOV	A,H
	CALL	PR2H
	POP	H
PR2HEX:	MOV	A,L
PR2H:	PUSH	PSW
	RRC
	RRC
	RRC
	RRC
	CALL	PRHEX
	POP	PSW
PRHEX:	ANI	0FH
	ADI	'0'
	CPI	'9'+1
	JC	PRH1
	ADI	'A'-'0'-10
PRH1:	MOV	E,A
	JMP	PUTCC
;
PRDECR:	XCHG
	PUSH	D
	CALL	DECFORM
	POP	B
	MOV	D,A
	MOV	A,C
	SUB	D
	PUSH	D
	JM	PRR1
	PUSH	H
	MOV	L,A
	CALL	SPC
	POP	H
PRR1:	POP	PSW
	JMP	PRD
;
PRDEC:	CALL	DECFORM
	JMP	PRD
;
DECFORM:LXI	B,NBUF	;return HL=strAdrs,A=NoOfChar
	PUSH	B
	MOV	A,H
	ORA	A
	JP	DF1
	MVI	A,'-'
	STAX	B
	INX	B
	CALL	NEGAT
DF1:	XRA	A
	STA	NUMFLG
	LXI	D,-10000
	CALL	DFSUB
	LXI	D,-1000
	CALL	DFSUB
	LXI	D,-100
	CALL	DFSUB
	LXI	D,-10
	CALL	DFSUB
	MOV	A,L
	ADI	'0'
	STAX	B
	INX	B
	MOV	A,C
	POP	H
	SUB	L
	RET

DFSUB:	XRA	A
DFS1:	SHLD	DIVWORK
	DAD	D
	INR	H
	DCR	H
	JM	DFS2
	INR	A
	JMP	DFS1
DFS2:	LHLD	DIVWORK
	MOV	D,A
	LDA	NUMFLG
	ORA	D
	RZ
	MOV	A,D
	ADI	'0'
	STAX	B
	INX	B
	MVI	A,0FFH
	STA	NUMFLG
	RET
;
PRD:	MOV	E,M	;PrintFormattedChar *HL; A
	INX	H
	PUSH	H
	PUSH	PSW
	CALL	PUTCC
	POP	PSW
	POP	H
	DCR	A
	JNZ	PRD
	RET
;	Operators
MULT:	MVI	A,16
	MOV	B,D
	MOV	C,E
	LXI	D,0
ML2:	DAD	H
	XCHG
	JNC	ML1
	DAD	B
ML1:	DCR	A
	RZ
	DAD	H
	XCHG
	JMP	ML2
;
DIV:	MOV	A,H	;HL=DE/HL(signed)
	XRA	D
	PUSH	PSW
	MOV	A,H
	ORA	A
	JM	DV1
	CALL	NEGAT
DV1:	MOV	B,H
	MOV	C,L
	XCHG
	CALL	ABS
	CALL	PDIV
	XCHG
	SHLD	MODUL
	XCHG
	POP	PSW
	RP
	JMP	NEGAT
;
PDIV:	MVI	A,16	;HL=HL/BC , DE=MOD (unsigned),BC must be NegNumber
	STA	DVW1
	LXI	D,0
PDV2:	DAD	H
	MOV	A,E
	RAL
	MOV	E,A
	MOV	A,D
	RAL
	MOV	D,A
	XCHG
	SHLD	DIVWORK
	DAD	B
	INR	H
	DCR	H
	JM	PDV1
	INR	E
	JMP	PDV3
PDV1:	LHLD	DIVWORK
PDV3:	XCHG
	LDA	DVW1
	DCR	A
	STA	DVW1
	JNZ	PDV2
	RET
;
WCMP:	MOV	A,D	;DE-HL flg=Z,C
	XRA	H
	JP	WCMP1	;same Sign ?
	XCHG
WCMP1:	MOV	A,D
	CMP	H
	RNZ
	MOV	A,E
	CMP	L
	RET
;
LEQ:		;Less EQual
	CALL	WCMP
	LXI	H,1
	RZ
	RC
	DCR	L
	RET
;
LES:		;Less Than
	CALL	WCMP
	LXI	H,1
	RC
	DCR	L
	RET
;
GEQ:		;Greater EQual
	CALL	WCMP
	LXI	H,1
	RNC
	DCR	L
	RET
;
GRE:		;Greater Than
	CALL	WCMP
	LXI	H,0
	RZ
	RC
	INR	L
	RET
;
;	Functions
INPNUM:	PUSH	B
	PUSH	D
	CALL	GETS
	LDAX	D
	CPI	'-'
	PUSH	PSW	;save sign
	JNZ	INPN1
	INX	D
	LDAX	D
INPN1:	CALL	GETNUM
	POP	PSW	;sign=Zflg
	POP	D
	POP	B
	JZ	NEGAT
	RET

GETNUM:	LXI	H,0
	CPI	'$'
	JZ	GETHEX
GETN1:	SUI	'0'	;Decimal
	RC
	CPI	9+1
	RNC
	MOV	B,H
	MOV	C,L
	DAD	H
	DAD	H
	DAD	B
	DAD	H
	MVI	B,0
	MOV	C,A
	DAD	B
	INX	D
	LDAX	D
	JMP	GETN1
;
GETHEX:	INX	D
	LDAX	D
	SUI	'0'
	RC
	CPI	'F'-'0'+1
	RNC
	CPI	9+1
	JC	GETH1
	SUI	'A'-'0'-10
	RC
GETH1:	DAD H
	DAD H
	DAD H
	DAD H
	MVI	B,0
	MOV	C,A
	DAD	B
	JMP	GETHEX
;
GETS:	LXI	D,CONBUF	;return DE=top,HL=end
	MVI	C,10
	CALL	BDOS
	MVI	E,0AH
	MVI	C,2
	CALL	BDOS
	LXI	D,CONBUF+1
	LDAX	D
	INX	D
	MOV	L,A
	MVI	H,0
	DAD	D
	MVI	M,0
	RET
;
FGETC:	JMP	NOIMPR
;
GETC:	MVI	C,1
	PUSH	D
	CALL	BDOS
	POP	D
	MOV	L,A
	MVI	H,0
	RET
;
ABS:	MOV	A,H
	ORA	A
	RP
NEGAT:	XRA	A
	SUB	L
	MOV	L,A
	SBB	H
	SUB	L
	MOV	H,A
	RET
;
RAND:	PUSH	H
	LXI	D,3D09H
	LHLD	RND
	CALL	MULT
	INX	H
	SHLD	RND
	MOV	L,H
	MVI	H,0
	POP	D
	CALL	MULT
	MOV	L,H
	MVI	H,0
	INX	H
	RET
;
KEY:	PUSH	D
	MVI	C,6
	MVI	E,0FFH
	CALL	BDOS
	POP	D
	MOV	L,A
	MVI	H,0
	RET
;
NOIMPR:	CALL	PRSTR
	DB 'NotImpremented',0
;
EXIT:	JMP	BOOT
;
;	END

MAIN:

